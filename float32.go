/* generated by github.com/schigh/slices/internal/base.go.  do not edit. */
package slices

import "sort"

// Float32Slice is the alias of []float32
type Float32Slice []float32

// Value returns the aliased []float32
func (slice Float32Slice) Value() []float32 {
	return []float32(slice)
}

// IndexOf returns the first index of needle, or -1 if not found
func (slice Float32Slice) IndexOf(needle float32) int {
	for idx, n := range slice {
		if needle == n {
			return idx
		}
	}

	return NotInSlice
}

// Contains returns true if the slice contains needle
func (slice Float32Slice) Contains(needle float32) bool {
	return slice.IndexOf(needle) != NotInSlice
}

// SortAsc will sort the slice in ascending order
func (slice Float32Slice) SortAsc() Float32Slice {
	sort.SliceStable(slice, func(i, j int) bool {
		return slice[i] < slice[j]
	})
	return slice
}

// SortDesc will sort the slice in descending order
func (slice Float32Slice) SortDesc() Float32Slice {
	sort.SliceStable(slice, func(i, j int) bool {
		return slice[j] < slice[i]
	})
	return slice
}

// Reverse will reverse the order of the slice
func (slice Float32Slice) Reverse() Float32Slice {
	l := len(slice)
	for i, j := 0, l-1; i < l/2; i++ {
		slice[i], slice[j] = slice[j], slice[i]
		j--
	}

	return slice
}

// Unique filters out duplicate float32 values
func (slice Float32Slice) Unique() Float32Slice {
	u := make([]float32, 0, len(slice))
	m := make(map[float32]bool)

	for _, v := range slice {
		if _, ok := m[v]; !ok {
			m[v] = true
			u = append(u, v)
		}
	}

	return Float32Slice(u)
}

// Filter will return all float32 values that evaluate true in the user-supplied function
func (slice Float32Slice) Filter(f func(float32) bool) Float32Slice {
	out := make([]float32, 0, len(slice))
	for _, v := range slice {
		if f(v) {
			out = append(out, v)
		}
	}

	return Float32Slice(out)
}

// Each will apply a function to each float32 in the slice.
// This should be used with data outside of the slice as it doesn't mutate it
func (slice Float32Slice) Each(f func(float32)) {
	for _, v := range slice {
		f(v)
	}
}

// Map will apply a function to each float32 in the slice and replace the previous value
func (slice Float32Slice) Map(f func(float32) float32) {
	for i, v := range slice {
		slice[i] = f(v)
	}
}
