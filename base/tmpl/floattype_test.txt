{{/*
	.BaseType
	-	the base go type (int, uint, etc)

	.PackageType
	-	the slice alias name (Int, Int16, etc)

*/}}// generated by github.com/schigh/slices/internal/base.go.  do not edit.
package slices

import (
	"testing"
	"reflect"
)

func Test{{.PackageType}}_IndexOf(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		needle {{.BaseType}}
		expected int
	}{
		{
			name: "only item",
			slice: []{{.BaseType}}{1},
			needle: 1,
			expected: 0,
		},
		{
			name: "at index 1",
			slice: []{{.BaseType}}{0,1.1,1.1},
			needle: 1.1,
			expected: 1,
		},
		{
			name: "missing",
			slice: []{{.BaseType}}{1.1,2.1,3.1,4},
			needle: 5.1,
			expected: NotInSlice,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).IndexOf(test.needle)
			if result != test.expected {
				t.Errorf("expected %d, got %d", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_Contains(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		needle {{.BaseType}}
		expected bool
	}{
		{
			name: "present",
			slice: []{{.BaseType}}{1.1,2.0,3.2,4.5},
			needle: 4.5,
			expected: true,
		},
		{
			name: "not present",
			slice: []{{.BaseType}}{1.1,2.0,3.2,4.5},
			needle: 5.6,
			expected: false,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Contains(test.needle)
			if result != test.expected {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_SortAsc(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "empty",
			slice: []{{.BaseType}}{},
			expected: []{{.BaseType}}{},
		},
		{
			name: "already sorted",
			slice: []{{.BaseType}}{0,0.1,0.11,0.111,0.1111,0.11111},
			expected: []{{.BaseType}}{0,0.1,0.11,0.111,0.1111,0.11111},
		},
		{
			name: "reversed",
			slice: []{{.BaseType}}{0.11111,0.1111,0.111,0.11,0.1,0},
			expected: []{{.BaseType}}{0,0.1,0.11,0.111,0.1111,0.11111},
		},
		{
			name: "random",
			slice: []{{.BaseType}}{3.0,1.1,4.32,5.4,0.123,2.99},
			expected: []{{.BaseType}}{0.123,1.1,2.99,3.0,4.32,5.4},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).SortAsc().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_SortDesc(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "empty",
			slice: []{{.BaseType}}{},
			expected: []{{.BaseType}}{},
		},
		{
			name: "already sorted",
			slice: []{{.BaseType}}{0.11111,0.1111,0.111,0.11,0.1,0},
			expected: []{{.BaseType}}{0.11111,0.1111,0.111,0.11,0.1,0},
		},
		{
			name: "reversed",
			slice: []{{.BaseType}}{0,0.1,0.11,0.111,0.1111,0.11111},
			expected: []{{.BaseType}}{0.11111,0.1111,0.111,0.11,0.1,0},
		},
		{
			name: "random",
			slice: []{{.BaseType}}{3.0,1.1,4.32,5.4,0.123,2.99},
			expected: []{{.BaseType}}{5.4,4.32,3.0,2.99,1.1,0.123},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).SortDesc().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_Unique(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "unaffected",
			slice: []{{.BaseType}}{0.123,0.1,0.3,0.99,0.432,0.101},
			expected: []{{.BaseType}}{0.123,0.1,0.3,0.99,0.432,0.101},
		},
		{
			name: "one extra 0.101",
			slice: []{{.BaseType}}{0.123,0.1,0.101,0.3,0.99,0.432,0.101},
			expected: []{{.BaseType}}{0.123,0.1,0.101,0.3,0.99,0.432},
		},
		{
			name: "extras everywhere",
			slice: []{{.BaseType}}{0.1,0.1,1.2,0.1,1.2,2.3,2.3,2.3,3.4,0.1,3.4,4.5,2.3,3.4,4.5,4.5,2.3,1.2,0.1},
			expected: []{{.BaseType}}{0.1,1.2,2.3,3.4,4.5},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Unique().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_Reverse(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "even length",
			slice: []{{.BaseType}}{0.123,1.234,2.345,3.456,4.567,5.678},
			expected: []{{.BaseType}}{5.678,4.567,3.456,2.345,1.234,0.123},
		},
		{
			name: "odd length",
			slice: []{{.BaseType}}{0.123,1.234,2.345,3.456,4.567,5.678,6.789},
			expected: []{{.BaseType}}{6.789,5.678,4.567,3.456,2.345,1.234,0.123},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Reverse().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}
