{{/*
	.BaseType
	-	the base go type (int, uint, etc)

	.PackageType
	-	the slice alias name (Int, Int16, etc)

*/}}package slices

import (
	"errors"
	"fmt"
	"io/ioutil"
	"reflect"
	"testing"
)

/* generated by github.com/schigh/slices/base/base.go.  do not edit. */

// region TESTS
// IndexOf
func Test{{.PackageType}}_IndexOf(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		needle {{.BaseType}}
		expected int
	}{
		{
			name: "only item",
			slice: []{{.BaseType}}{1},
			needle: 1,
			expected: 0,
		},
		{
			name: "at index 1",
			slice: []{{.BaseType}}{0,1.1,1.1},
			needle: 1.1,
			expected: 1,
		},
		{
			name: "missing",
			slice: []{{.BaseType}}{1.1,2.1,3.1,4},
			needle: 5.1,
			expected: NotInSlice,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).IndexOf(test.needle)
			if result != test.expected {
				t.Errorf("expected %d, got %d", test.expected, result)
			}
		})
	}
}

// Contains
func Test{{.PackageType}}_Contains(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		needle {{.BaseType}}
		expected bool
	}{
		{
			name: "present",
			slice: []{{.BaseType}}{1.1,2.0,3.2,4.5},
			needle: 4.5,
			expected: true,
		},
		{
			name: "not present",
			slice: []{{.BaseType}}{1.1,2.0,3.2,4.5},
			needle: 5.6,
			expected: false,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Contains(test.needle)
			if result != test.expected {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// SortAsc
func Test{{.PackageType}}_SortAsc(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "empty",
			slice: []{{.BaseType}}{},
			expected: []{{.BaseType}}{},
		},
		{
			name: "already sorted",
			slice: []{{.BaseType}}{0,0.1,0.11,0.111,0.1111,0.11111},
			expected: []{{.BaseType}}{0,0.1,0.11,0.111,0.1111,0.11111},
		},
		{
			name: "reversed",
			slice: []{{.BaseType}}{0.11111,0.1111,0.111,0.11,0.1,0},
			expected: []{{.BaseType}}{0,0.1,0.11,0.111,0.1111,0.11111},
		},
		{
			name: "random",
			slice: []{{.BaseType}}{3.0,1.1,4.32,5.4,0.123,2.99},
			expected: []{{.BaseType}}{0.123,1.1,2.99,3.0,4.32,5.4},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).SortAsc().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// SortDesc
func Test{{.PackageType}}_SortDesc(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "empty",
			slice: []{{.BaseType}}{},
			expected: []{{.BaseType}}{},
		},
		{
			name: "already sorted",
			slice: []{{.BaseType}}{0.11111,0.1111,0.111,0.11,0.1,0},
			expected: []{{.BaseType}}{0.11111,0.1111,0.111,0.11,0.1,0},
		},
		{
			name: "reversed",
			slice: []{{.BaseType}}{0,0.1,0.11,0.111,0.1111,0.11111},
			expected: []{{.BaseType}}{0.11111,0.1111,0.111,0.11,0.1,0},
		},
		{
			name: "random",
			slice: []{{.BaseType}}{3.0,1.1,4.32,5.4,0.123,2.99},
			expected: []{{.BaseType}}{5.4,4.32,3.0,2.99,1.1,0.123},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).SortDesc().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// Unique
func Test{{.PackageType}}_Unique(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "unaffected",
			slice: []{{.BaseType}}{0.123,0.1,0.3,0.99,0.432,0.101},
			expected: []{{.BaseType}}{0.123,0.1,0.3,0.99,0.432,0.101},
		},
		{
			name: "one extra 0.101",
			slice: []{{.BaseType}}{0.123,0.1,0.101,0.3,0.99,0.432,0.101},
			expected: []{{.BaseType}}{0.123,0.1,0.101,0.3,0.99,0.432},
		},
		{
			name: "extras everywhere",
			slice: []{{.BaseType}}{0.1,0.1,1.2,0.1,1.2,2.3,2.3,2.3,3.4,0.1,3.4,4.5,2.3,3.4,4.5,4.5,2.3,1.2,0.1},
			expected: []{{.BaseType}}{0.1,1.2,2.3,3.4,4.5},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Unique().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// Reverse
func Test{{.PackageType}}_Reverse(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "even length",
			slice: []{{.BaseType}}{0.123,1.234,2.345,3.456,4.567,5.678},
			expected: []{{.BaseType}}{5.678,4.567,3.456,2.345,1.234,0.123},
		},
		{
			name: "odd length",
			slice: []{{.BaseType}}{0.123,1.234,2.345,3.456,4.567,5.678,6.789},
			expected: []{{.BaseType}}{6.789,5.678,4.567,3.456,2.345,1.234,0.123},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Reverse().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// Filter
func Test{{.PackageType}}_Filter(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
		filterFunc func({{.BaseType}}) bool
	}{
		{
			name: "gt 10.5",
			slice: []{{.BaseType}}{1.2, 2.3, 5.6, 11.12, 13.14, 15.16},
			expected: []{{.BaseType}}{11.12, 13.14, 15.16},
			filterFunc: func(n {{.BaseType}}) bool { return n > 10.5 },
		},
		{
			name: "gt 0",
			slice: []{{.BaseType}}{0, -0.000001, 0.000001, -0.0000001, 0.0000001},
			expected: []{{.BaseType}}{0.000001, 0.0000001},
			filterFunc: func(n {{.BaseType}}) bool { return n > 0 },
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Filter(test.filterFunc).Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// Each
func Test{{.PackageType}}_Each(t *testing.T) {

	var rabbit {{.BaseType}}
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected {{.BaseType}}
		eachFunc func({{.BaseType}})
	}{
		{
			name: "add n",
			slice: []{{.BaseType}}{1.25, 2.5, 5.75, 11.25, 13.5, 15.25},
			expected: 49.5,
			eachFunc: func(n {{.BaseType}}) { rabbit += n },
		},
		{
			name: "subtract n",
			slice: []{{.BaseType}}{1.5, 2.25, 6.75, 8.5, 12.25},
			expected: 18.25,
			eachFunc: func(n {{.BaseType}}) { rabbit -= n },
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			{{.PackageType}}(test.slice).Each(test.eachFunc)
			if test.expected != rabbit {
				t.Errorf("expected %v, got %v", test.expected, rabbit)
			}
		})
	}

	fmt.Fprintf(ioutil.Discard, "%v", rabbit)
}

// CheckEach
func Test{{.PackageType}}_CheckEach(t *testing.T) {

	var rabbit {{.BaseType}}
	myErr := errors.New("i am an error")
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected {{.BaseType}}
		before func()
		err error
		eachFunc func({{.BaseType}}) error
	}{
		{
			name: "add n",
			slice: []{{.BaseType}}{1.25, 2.5, 5.75, 11.25, 13.5, 15.25},
			expected: 49.5,
			eachFunc: func(n {{.BaseType}}) error {
				rabbit += n
				return nil
			},
		},
		{
			name: "subtract n",
			slice: []{{.BaseType}}{1.5, 2.25, 6.75, 8.5, 12.25},
			expected: 18.25,
			eachFunc: func(n {{.BaseType}}) error {
				rabbit -= n
				return nil
			},
		},
		{
			name: "errors",
			slice: []{{.BaseType}}{1.25, 2.5, 5.75, 11.25, 13.5, 15.25},
			expected: 9.5,
			err: myErr,
			before: func() { rabbit = {{.ZeroValue}} },
			eachFunc: func(n {{.BaseType}}) error {
				if rabbit > 9 {
					return myErr
				}
				rabbit += n
				return nil
			},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			if test.before != nil {
				test.before()
			}
			checkErr := {{.PackageType}}(test.slice).CheckEach(test.eachFunc)
			if test.expected != rabbit {
				t.Errorf("expected %v, got %v", test.expected, rabbit)
			}
			if test.err != checkErr {
				t.Errorf("expected %v, got %v", myErr, test.err)
			}
		})
	}

	fmt.Fprintf(ioutil.Discard, "%v", rabbit)
}

// Map
func Test{{.PackageType}}_Map(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
		mapFunc func({{.BaseType}}) {{.BaseType}}
	}{
		{
			name: "add 3.5",
			slice: []{{.BaseType}}{1.23, 2.34, 5.67, 11.5, 13.25, 15.25},
			expected: []{{.BaseType}}{4.73, 5.84, 9.17, 15, 16.75, 18.75},
			mapFunc: func(n {{.BaseType}}) {{.BaseType}} { return n + 3.5 },
		},
		{
			name: "multiply by 2",
			slice: []{{.BaseType}}{1.5, 2.5, 6.5, 8.5, 12.5, 15.5, 17.5},
			expected: []{{.BaseType}}{3.0, 5.0, 13.0, 17.0, 25.0, 31.0, 35.0},
			mapFunc: func(n {{.BaseType}}) {{.BaseType}} { return n*2 },
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			{{.PackageType}}(test.slice).Map(test.mapFunc)
			if !reflect.DeepEqual(test.expected, test.slice) {
				t.Errorf("expected %v, got %v", test.expected, test.slice)
			}
		})
	}
}

//endregion
