{{/*
	.BaseType
	-	the base go type (int, uint, etc)

	.PackageType
	-	the slice alias name (Int, Int16, etc)

*/}}
package slices

import (
	"fmt"
	"io/ioutil"
	"reflect"
	"testing"

	"github.com/schigh/slices/internal"
)

/* generated by github.com/schigh/slices/base/base.go.  do not edit. */

//region TESTS
// IndexOf
func Test{{.PackageType}}_IndexOf(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		needle {{.BaseType}}
		expected int
	}{
		{
			name: "only item",
			slice: []{{.BaseType}}{1},
			needle: 1,
			expected: 0,
		},
		{
			name: "at index 1",
			slice: []{{.BaseType}}{0,1,1},
			needle: 1,
			expected: 1,
		},
		{
			name: "missing",
			slice: []{{.BaseType}}{1,2,3,4},
			needle: 5,
			expected: NotInSlice,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).IndexOf(test.needle)
			if result != test.expected {
				t.Errorf("expected %d, got %d", test.expected, result)
			}
		})
	}
}

// Contains
func Test{{.PackageType}}_Contains(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		needle {{.BaseType}}
		expected bool
	}{
		{
			name: "present",
			slice: []{{.BaseType}}{1,2,3,4},
			needle: 4,
			expected: true,
		},
		{
			name: "not present",
			slice: []{{.BaseType}}{1,2,3,4},
			needle: 5,
			expected: false,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Contains(test.needle)
			if result != test.expected {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// SortAsc
func Test{{.PackageType}}_SortAsc(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "empty",
			slice: []{{.BaseType}}{},
			expected: []{{.BaseType}}{},
		},
		{
			name: "already sorted",
			slice: []{{.BaseType}}{0,1,2,3,4,5},
			expected: []{{.BaseType}}{0,1,2,3,4,5},
		},
		{
			name: "reversed",
			slice: []{{.BaseType}}{5,4,3,2,1,0},
			expected: []{{.BaseType}}{0,1,2,3,4,5},
		},
		{
			name: "random",
			slice: []{{.BaseType}}{3,1,4,5,0,2},
			expected: []{{.BaseType}}{0,1,2,3,4,5},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).SortAsc().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// SortDesc
func Test{{.PackageType}}_SortDesc(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "empty",
			slice: []{{.BaseType}}{},
			expected: []{{.BaseType}}{},
		},
		{
			name: "already sorted",
			slice: []{{.BaseType}}{5,4,3,2,1,0},
			expected: []{{.BaseType}}{5,4,3,2,1,0},
		},
		{
			name: "reversed",
			slice: []{{.BaseType}}{0,1,2,3,4,5},
			expected: []{{.BaseType}}{5,4,3,2,1,0},
		},
		{
			name: "random",
			slice: []{{.BaseType}}{3,1,4,5,0,2},
			expected: []{{.BaseType}}{5,4,3,2,1,0},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).SortDesc().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// Unique
func Test{{.PackageType}}_Unique(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "unaffected",
			slice: []{{.BaseType}}{0,1,2,3,4,5},
			expected: []{{.BaseType}}{0,1,2,3,4,5},
		},
		{
			name: "one extra five",
			slice: []{{.BaseType}}{5,0,1,2,3,4,5},
			expected: []{{.BaseType}}{5,0,1,2,3,4},
		},
		{
			name: "extras everywhere",
			slice: []{{.BaseType}}{0,0,1,0,1,2,2,2,3,0,3,4,2,3,4,4,2,1,0},
			expected: []{{.BaseType}}{0,1,2,3,4},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Unique().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// Reverse
func Test{{.PackageType}}_Reverse(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "even length",
			slice: []{{.BaseType}}{0,1,2,3,4,5},
			expected: []{{.BaseType}}{5,4,3,2,1,0},
		},
		{
			name: "odd length",
			slice: []{{.BaseType}}{0,1,2,3,4,5,6},
			expected: []{{.BaseType}}{6,5,4,3,2,1,0},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Reverse().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// Filter
func Test{{.PackageType}}_Filter(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
		filterFunc func({{.BaseType}}) bool
	}{
		{
			name: "gt 10",
			slice: []{{.BaseType}}{1, 2, 5, 11, 13, 15},
			expected: []{{.BaseType}}{11, 13, 15},
			filterFunc: func(n {{.BaseType}}) bool { return n > 10 },
		},
		{
			name: "mod 3",
			slice: []{{.BaseType}}{1, 2, 6, 11, 12, 15, 17},
			expected: []{{.BaseType}}{6, 12, 15},
			filterFunc: func(n {{.BaseType}}) bool { return n%3 == 0 },
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Filter(test.filterFunc).Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

// Each
func Test{{.PackageType}}_Each(t *testing.T) {

	var rabbit {{.BaseType}}
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected {{.BaseType}}
		eachFunc func({{.BaseType}})
	}{
		{
			name: "add n",
			slice: []{{.BaseType}}{1, 2, 5, 11, 13, 15},
			expected: 47,
			eachFunc: func(n {{.BaseType}}) { rabbit += n },
		},
		{
			name: "subtract n",
			slice: []{{.BaseType}}{1, 2, 6, 8, 12},
			expected: 18,
			eachFunc: func(n {{.BaseType}}) { rabbit -= n },
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			{{.PackageType}}(test.slice).Each(test.eachFunc)
			if test.expected != rabbit {
				t.Errorf("expected %v, got %v", test.expected, rabbit)
			}
		})
	}
}

// Map
func Test{{.PackageType}}_Map(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
		mapFunc func({{.BaseType}}) {{.BaseType}}
	}{
		{
			name: "add 3",
			slice: []{{.BaseType}}{1, 2, 5, 11, 13, 15},
			expected: []{{.BaseType}}{4, 5, 8, 14, 16, 18},
			mapFunc: func(n {{.BaseType}}) {{.BaseType}} { return n + 3 },
		},
		{
			name: "set mod 2",
			slice: []{{.BaseType}}{1, 2, 6, 8, 12, 15, 17},
			expected: []{{.BaseType}}{1, 0, 0, 0, 0, 1, 1},
			mapFunc: func(n {{.BaseType}}) {{.BaseType}} { return {{.BaseType}}(n%2) },
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			{{.PackageType}}(test.slice).Map(test.mapFunc)
			if !reflect.DeepEqual(test.expected, test.slice) {
				t.Errorf("expected %v, got %v", test.expected, test.slice)
			}
		})
	}
}

// endregion

// region BENCHMARKS
// IndexOf
func Benchmark{{.PackageType}}_IndexOf(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).IndexOf(1)
			}
		})
	}
}

// Contains
func Benchmark{{.PackageType}}_Contains(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).Contains(1)
			}
		})
	}
}

// SortAsc
func Benchmark{{.PackageType}}_SortAsc(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).SortAsc()
			}
		})
	}
}

// SortDesc
func Benchmark{{.PackageType}}_SortDesc(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).SortDesc()
			}
		})
	}
}

// Reverse
func Benchmark{{.PackageType}}_Reverse(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).Reverse()
			}
		})
	}
}

// Filter
func Benchmark{{.PackageType}}_Filter(b *testing.B) {
	benchFunc := func(n {{.BaseType}}) bool {
		return n%2 == 0
	}
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).Filter(benchFunc)
			}
		})
	}
}

// Each
func Benchmark{{.PackageType}}_Each(b *testing.B) {
	var rabbit {{.BaseType}}
	benchFunc := func(n {{.BaseType}}) {
		rabbit = n
	}
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).Each(benchFunc)
			}
		})
	}

	fmt.Fprintf(ioutil.Discard, "%v", rabbit)
}

// Map
func Benchmark{{.PackageType}}_Map(b *testing.B) {
	benchFunc := func(n {{.BaseType}}) {{.BaseType}} {
		n++
		return n
	}
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).Map(benchFunc)
			}
		})
	}
}
// endregion
