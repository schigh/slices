{{/*
	.BaseType
	-	the base go type (int, uint, etc)

	.PackageType
	-	the slice alias name (Int, Int16, etc)

*/}}// generated by github.com/schigh/slices/internal/base.go.  do not edit.
package slices

import (
	"testing"
	"reflect"
	"github.com/schigh/slices/internal"
)

//region TESTS

func Test{{.PackageType}}_IndexOf(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		needle {{.BaseType}}
		expected int
	}{
		{
			name: "only item",
			slice: []{{.BaseType}}{"foo"},
			needle: "foo",
			expected: 0,
		},
		{
			name: "at index 1",
			slice: []{{.BaseType}}{"foo","bar","bar"},
			needle: "bar",
			expected: 1,
		},
		{
			name: "missing",
			slice: []{{.BaseType}}{"foo","bar","fizz","buzz"},
			needle: "baz",
			expected: NotInSlice,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).IndexOf(test.needle)
			if result != test.expected {
				t.Errorf("expected %d, got %d", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_Contains(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		needle {{.BaseType}}
		expected bool
	}{
		{
			name: "present",
			slice: []{{.BaseType}}{"foo","bar","fizz","buzz"},
			needle: "buzz",
			expected: true,
		},
		{
			name: "not present",
			slice: []{{.BaseType}}{"foo","bar","fizz","buzz"},
			needle: "baz",
			expected: false,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Contains(test.needle)
			if result != test.expected {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_TruncateZero(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "unaffected",
			slice: []{{.BaseType}}{"foo","bar","fizz","buzz","baz"},
			expected: []{{.BaseType}}{"foo","bar","fizz","buzz","baz"},
		},
		{
			name: "unaffected 2",
			slice: []{{.BaseType}}{"","","","","foo"},
			expected: []{{.BaseType}}{"","","","","foo"},
		},
		{
			name: "all but one",
			slice: []{{.BaseType}}{"foo","","","",""},
			expected: []{{.BaseType}}{"foo"},
		},
		{
			name: "last one only",
			slice: []{{.BaseType}}{"foo","bar","fizz","buzz",""},
			expected: []{{.BaseType}}{"foo","bar","fizz","buzz"},
		},
		{
			name: "empties the slice",
			slice: []{{.BaseType}}{"","","","",""},
			expected: []{{.BaseType}}{},
		},
		{
			name: "empty slice",
			slice: []{{.BaseType}}{},
			expected: []{{.BaseType}}{},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).TruncateZero().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_SortAsc(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "empty",
			slice: []{{.BaseType}}{},
			expected: []{{.BaseType}}{},
		},
		{
			name: "already sorted",
			slice: []{{.BaseType}}{"bar","baz","buzz","fizz","foo"},
			expected: []{{.BaseType}}{"bar","baz","buzz","fizz","foo"},
		},
		{
			name: "reversed",
			slice: []{{.BaseType}}{"foo","fizz","buzz","baz","bar"},
			expected: []{{.BaseType}}{"bar","baz","buzz","fizz","foo"},
		},
		{
			name: "random",
			slice: []{{.BaseType}}{"foo","bar","fizz","buzz","baz"},
			expected: []{{.BaseType}}{"bar","baz","buzz","fizz","foo"},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).SortAsc().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_SortDesc(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "empty",
			slice: []{{.BaseType}}{},
			expected: []{{.BaseType}}{},
		},
		{
			name: "already sorted",
			slice: []{{.BaseType}}{"foo","fizz","buzz","baz","bar"},
			expected: []{{.BaseType}}{"foo","fizz","buzz","baz","bar"},
		},
		{
			name: "reversed",
			slice: []{{.BaseType}}{"bar","baz","buzz","fizz","foo"},
			expected: []{{.BaseType}}{"foo","fizz","buzz","baz","bar"},
		},
		{
			name: "random",
			slice: []{{.BaseType}}{"foo","bar","fizz","buzz","baz"},
			expected: []{{.BaseType}}{"foo","fizz","buzz","baz","bar"},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).SortDesc().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_Unique(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "unaffected",
			slice: []{{.BaseType}}{"foo","bar","fizz","buzz","baz"},
			expected: []{{.BaseType}}{"foo","bar","fizz","buzz","baz"},
		},
		{
			name: "one extra buzz",
			slice: []{{.BaseType}}{"foo","bar","fizz","buzz","baz","buzz"},
			expected: []{{.BaseType}}{"foo","bar","fizz","buzz","baz"},
		},
		{
			name: "extras everywhere",
			slice: []{{.BaseType}}{"foo","foo","bar","foo","bar","fizz","fizz","fizz","buzz","foo","buzz","baz","fizz","buzz","baz","baz","fizz","bar","foo"},
			expected: []{{.BaseType}}{"foo","bar","fizz","buzz","baz"},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Unique().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

func Test{{.PackageType}}_Reverse(t *testing.T) {
	tests := []struct {
		name string
		slice []{{.BaseType}}
		expected []{{.BaseType}}
	}{
		{
			name: "even length",
			slice: []{{.BaseType}}{"foo","bar","baz","fizz","buzz"},
			expected: []{{.BaseType}}{"buzz","fizz","baz","bar","foo"},
		},
		{
			name: "odd length",
			slice: []{{.BaseType}}{"foo","bar","baz","fizz","buzz","herp"},
			expected: []{{.BaseType}}{"herp","buzz","fizz","baz","bar","foo"},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := {{.PackageType}}(test.slice).Reverse().Value()
			if !reflect.DeepEqual(test.expected, result) {
				t.Errorf("expected %v, got %v", test.expected, result)
			}
		})
	}
}

//endregion

//region BENCHMARKS

func Benchmark{{.PackageType}}_IndexOf(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).IndexOf("foo")
			}
		})
	}
}

func Benchmark{{.PackageType}}_Contains(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).Contains("foo")
			}
		})
	}
}

func Benchmark{{.PackageType}}_SortAsc(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).SortAsc()
			}
		})
	}
}

func Benchmark{{.PackageType}}_SortDesc(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).SortDesc()
			}
		})
	}
}

func Benchmark{{.PackageType}}_Reverse(b *testing.B) {
	benchmarks := []struct {
		name string
		slice []{{.BaseType}}
	}{
		{
			name: "10 elements",
			slice: internal.Gen{{.PackageType}}(10),
		},
		{
			name: "100 elements",
			slice: internal.Gen{{.PackageType}}(100),
		},
		{
			name: "1000 elements",
			slice: internal.Gen{{.PackageType}}(1000),
		},
		{
			name: "10000 elements",
			slice: internal.Gen{{.PackageType}}(10000),
		},
		{
			name: "100000 elements",
			slice: internal.Gen{{.PackageType}}(100000),
		},
	}
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.PackageType}}(bm.slice).Reverse()
			}
		})
	}
}
//endregion
