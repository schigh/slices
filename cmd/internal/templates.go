package internal

// Template encapsulates template params
type Template struct {
	PackageName  string
	GenDate      string
	SourceStruct string
	Operations   []Operation
}

// SliceTemplate aliases string
type SliceTemplate string

// String just returns the template's proper string value
func (t SliceTemplate) String() string {
	return string(t)
}

// HeadTmpl is the header template for all generated slice files
const HeadTmpl = SliceTemplate(`// generated by slices (github.com/schigh/slices).  do not edit.
// gen date: {{.GenDate}}

package {{.PackageName}}

// {{.SourceStruct}}Slice aliases []{{.SourceStruct}}
type {{.SourceStruct}}Slice []{{.SourceStruct}}

// Value returns the wrapped {{.SourceStruct}} slice
func (slice {{.SourceStruct}}Slice) Value() []{{.SourceStruct}} {
	return []{{.SourceStruct}}(slice)
}

`)

// MapTmpl is the map function
const MapTmpl = SliceTemplate(`// Map applies a function to every {{.SourceStruct}} in the slice.  This function will mutate the slice in place
func (slice {{.SourceStruct}}Slice) Map(f func({{if .ByValue}}{{else}}*{{end}}{{.SourceStruct}})) {
	for i, instance := range slice {
		f({{if .ByValue}}{{else}}&{{end}}instance)
		slice[i] = instance
	}
}

`)

// EachTmpl is the each function
const EachTmpl = SliceTemplate(`// Each applies a function to every {{.SourceStruct}} in the slice.
func (slice {{.SourceStruct}}Slice) Each(f func({{if .ByValue}}{{else}}*{{end}}{{.SourceStruct}})) {
	for _, instance := range slice {
		f({{if .ByValue}}{{else}}&{{end}}instance)
	}
}

`)

// FilterTmpl is the filter function
const FilterTmpl = SliceTemplate(`// Filter evaluates every element in the slice, and returns all {{.SourceStruct}} 
// instances where the eval function returns true
func (slice {{.SourceStruct}}Slice) Filter(f func({{if .ByValue}}{{else}}*{{end}}{{.SourceStruct}}) bool) {{.SourceStruct}}Slice {
	out := make([]{{.SourceStruct}}, 0, len(slice))
	for _, instance := range slice {
		if f({{if .ByValue}}{{else}}&{{end}}instance) {
			out = append(out, instance)
		}
	}

	return {{.SourceStruct}}Slice(out)
}

`)
