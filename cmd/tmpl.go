package main

const NEWLINE = `
`

const HEADTMPL = `// generated by slices (github.com/schigh/slices).  do not edit.
// gen date: {{.GenDate}}

package {{.PackageName}}

// {{.SourceStruct}}Slice aliases []{{.SourceStruct}}
type {{.SourceStruct}}Slice []{{.SourceStruct}}

// Value returns the wrapped {{.SourceStruct}} slice
func (slice {{.SourceStruct}}Slice) Value() []{{.SourceStruct}} {
	return []{{.SourceStruct}}(slice)
}
`

const MAPTMPL = `// Map applies a function to every {{.SourceStruct}} in the slice
func (slice {{.SourceStruct}}Slice) Map(f func(*{{.SourceStruct}})) {
	for i, instance := range slice {
		f(&instance)
		slice[i] = instance
	}
}
`

const FILTERTMPL = `// Filter evaluates every element in the slice, and returns all {{.SourceStruct}} 
// instances where the eval function returns true
func (slice {{.SourceStruct}}Slice) Filter(f func(*{{.SourceStruct}}) bool) {{.SourceStruct}}Slice {
	out := make([]{{.SourceStruct}}, 0, len(slice))
	for _, instance := range slice {
		if f(&instance) {
			out = append(out, instance)
		}
	}

	return {{.SourceStruct}}Slice(out)
}
`
