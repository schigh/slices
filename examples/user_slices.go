// generated by slices (github.com/schigh/slices).  do not edit.
// gen date: Sun, 10 Jun 2018 23:18:46 -0400

package examples

// UserSlice aliases []User
type UserSlice []User

// Value returns the wrapped User slice
func (slice UserSlice) Value() []User {
	return []User(slice)
}

// Map applies a function to every User in the slice
func (slice UserSlice) Map(f func(*User)) {
	for i, instance := range slice {
		f(&instance)
		slice[i] = instance
	}
}

// Filter evaluates every element in the slice, and returns all User 
// instances where the eval function returns true
func (slice UserSlice) Filter(f func(*User) bool) UserSlice {
	out := make([]User, 0, len(slice))
	for _, instance := range slice {
		if f(&instance) {
			out = append(out, instance)
		}
	}

	return UserSlice(out)
}

