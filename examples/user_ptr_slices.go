// generated by slices (github.com/schigh/slices).  do not edit.
// gen date: Sat, 14 Jul 2018 00:50:15 -0400

package examples

// UserPtrSlice aliases []*User
type UserPtrSlice []*User

// Value returns the wrapped User slice
func (slice UserPtrSlice) Value() []*User {
	return []*User(slice)
}

// Map applies a function to every User in the slice.  This function will mutate the slice in place
func (slice UserPtrSlice) Map(f func(*User) *User) {
	for i, v := range slice {
		slice[i] = f(v)
	}
}

// Filter evaluates every element in the slice, and returns all User 
// instances where the eval function returns true
func (slice UserPtrSlice) Filter(f func(*User) bool) UserPtrSlice {
	out := make([]*User, 0, len(slice))
	for _, v := range slice {
		if f(v) {
			out = append(out, v)
		}
	}

	return UserPtrSlice(out)
}

// Each applies a function to every User in the slice.
func (slice UserPtrSlice) Each(f func(*User)) {
	for _, v := range slice {
		f(v)
	}
}

