// generated by slices (github.com/schigh/slices).  do not edit.
// gen date: Sun, 24 Jun 2018 22:47:57 -0400

package examples

// AccountSlice aliases []Account
type AccountSlice []Account

// Value returns the wrapped Account slice
func (slice AccountSlice) Value() []Account {
	return []Account(slice)
}

// Map applies a function to every Account in the slice.  This function will mutate the slice in place
func (slice AccountSlice) Map(f func(*Account)) {
	for i, instance := range slice {
		f(&instance)
		slice[i] = instance
	}
}

// Filter evaluates every element in the slice, and returns all Account 
// instances where the eval function returns true
func (slice AccountSlice) Filter(f func(*Account) bool) AccountSlice {
	out := make([]Account, 0, len(slice))
	for _, instance := range slice {
		if f(&instance) {
			out = append(out, instance)
		}
	}

	return AccountSlice(out)
}

// Each applies a function to every Account in the slice.
func (slice AccountSlice) Each(f func(*Account)) {
	for _, instance := range slice {
		f(&instance)
	}
}

