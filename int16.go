// generated by github.com/schigh/slices/internal/base.go.  do not edit.
package slices

import "sort"

// Int16Slice is the alias of []int16
type Int16Slice []int16

// Value returns the aliased []int16
func (slice Int16Slice) Value() []int16 {
	return []int16(slice)
}

// IndexOf returns the first index of needle, or -1 if not found
func (slice Int16Slice) IndexOf(needle int16) int {
	for idx, n := range slice {
		if needle == n {
			return idx
		}
	}

	return NotInSlice
}

// Contains returns true if the slice contains needle
func (slice Int16Slice) Contains(needle int16) bool {
	return slice.IndexOf(needle) != NotInSlice
}

// SortAsc will sort an []int16 in ascending order
func (slice Int16Slice) SortAsc() Int16Slice {
	sort.SliceStable(slice, func(i, j int) bool {
		return slice[i] < slice[j]
	})
	return slice
}

// SortDesc will sort an []int16 in descending order
func (slice Int16Slice) SortDesc() Int16Slice {
	sort.SliceStable(slice, func(i, j int) bool {
		return slice[j] < slice[i]
	})
	return slice
}

// Reverse will reverse the order of the slice
func (slice Int16Slice) Reverse() Int16Slice {
	l := len(slice)
	for i, j := 0, l-1; i < l/2; i++ {
		slice[i], slice[j] = slice[j], slice[i]
		j--
	}

	return slice
}

// TruncateZero will trim ALL the zero values off the end of the slice,
// stopping at the first non-zero value it finds
func (slice Int16Slice) TruncateZero() Int16Slice {
	l := len(slice)
	if l > 0 {
		for i := l-1; i >= 0; i-- {
			if slice[i] != 0 {
				return slice[:i+1]
			}
		}
		return slice[:0]
	}

	return slice
}

// Unique filters out duplicate values
func (slice Int16Slice) Unique() Int16Slice {
	u := make([]int16, 0, len(slice))
	m := make(map[int16]bool)

	for _, i := range slice {
		if _, ok := m[i]; !ok {
			m[i] = true
			u = append(u, i)
		}
	}

	return Int16Slice(u)
}

func (slice Int16Slice) Filter(f func(int16) bool) Int16Slice {
	out := make([]int16, 0, len(slice))
	for _, i := range slice {
		if f(i) {
			out = append(out, i)
		}
	}

	return Int16Slice(out)
}
